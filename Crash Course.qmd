---
title: "Crash Course"
format: html
author: 
  - name: Audrey Saidel
    email: audrey.saidel@snhu.edu
    affiliations: 
      - name: Southern New Hampshire University
date: 1/8/2025
date-modified: 1/8/2025
title-block-banner: "#F9629F"
description: "Crash Course in Git, Quarto, and R"
theme: journal
toc: true

---
## Working with Data
```{r}
#| message: false
#| code-fold: true
library(tidyverse)
library(tidymodels)
library(kableExtra)
library(skimr)

Hits <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/battedballs.csv")
ballparks <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/park_dimensions.csv")

```
## Exploring the Data
```{r}
Hits |>
  head() |>
    kable()
```
```{r}
ballparks |>
  head() |>
    kable()
```
## Joining the Data
```{r}
Hits <- Hits |>
  left_join(ballparks, by = c("park" = "park"))
```

We joined the hits and parks data together to obtain a full dataset with `r nrow(Hits)` rows and `r ncol(Hits)` columns
```{r}
Hits |>
  head() |>
    kable()
```

```{r}
skim(Hits) 
```
Split into training and test data

```{r}
set.seed(555)
data_splits <- initial_split(Hits, 0.85, strata = is_home_run)

train <- training(data_splits)
test <- testing(data_splits)
```

## Exploratory Data Analysis

How and why do home runs happen?

### Sometimes useful functionality
Filtering rows

```{r}
  train |>
    filter(is_home_run == 1)

  train |>
    filter(launch_angle > 80)
  
  train |>
    filter(str_detect(NAME, "Fenway"))
```
Selecting just a few columns
```{r}
  train |>
    select(launch_speed, launch_angle)
```
Building new variables from old ones (*Feature Engineering*)
```{r}
train |>
  mutate(fast_pitch = ifelse(pitch_mph > 100, "yes", "no"))
```
### Summary Statistics

Home runs...

```{r}
train |>
  count(is_home_run) |>
  mutate(prop = 100*n/sum(n))
```
```{r}
train |>
  summarize(
    min_angle = min(launch_angle, na.rm = TRUE),
    mean_angle = mean(launch_angle, na.rm = TRUE),
    median_angle = median(launch_angle, na.rm = TRUE),
    max_angle = max(launch_angle, na.rm = TRUE),
    sd_angle = sd(launch_angle, na.rm = TRUE)
    
  )
```
#### Grouped Summaries

```{r}
train |>
  group_by(is_home_run) |>
  summarize(
    min_angle = min(launch_angle, na.rm = TRUE),
    mean_angle = mean(launch_angle, na.rm = TRUE),
    median_angle = median(launch_angle, na.rm = TRUE),
    max_angle = max(launch_angle, na.rm = TRUE),
    sd_angle = sd(launch_angle, na.rm = TRUE)
    
  )
```
### Data Visualization

#### Single Variables
```{r}
train |>
  ggplot()+
  geom_bar(aes(x = factor(is_home_run, labels = c("No", "Yes")), fill = factor(is_home_run, labels = c("No", "Yes")))) + 
  scale_fill_manual(values = c("pink", "red")) +
  labs( ##labeling the chart
    title = "Home Run Distribution",
    x = "Is Home Run",
    y = "Count",
    fill = "Home Run"
  ) +
  theme_minimal() ##gets rid of the gray background
```
```{r}
train |>
  ggplot() +
  geom_boxplot(aes(x = pitch_mph))
```
```{r}
train |> 
  ggplot() +
  geom_histogram(aes(x = launch_speed, y = after_stat(density)), bins = 30, na.rm = TRUE, fill = "pink") +
   geom_density(aes(x = launch_speed), color = "red", size = 1, alpha = .04) +
  labs(
    title = "Launch Speed Distribution",
    x = "Launch Speed",
    y = "Frequency"
  ) +
  theme_minimal()
```
#### Multiple Variable

```{r}
train |>
  ggplot() +
  geom_bar(aes(x = batter_team, fill = factor(is_home_run, labels = c("No", "Yes")))) +
  scale_fill_manual(values = c("pink", "red")) +  
  labs(
    title = "Home Runs by Batter Team",
    x = "Batter Team",
    y = "Count",
    fill = "Home Run"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

###### Will a batted ball be a home run?
```{r}
# Check the unique values before mapping
unique(train$is_home_run)
train$is_home_run <- as.character(train$is_home_run)
train$is_home_run <- ifelse(train$is_home_run == 1, "yes", "no")
# Check the unique values after mapping
unique(train$is_home_run)
```
```{r}
train$is_home_run <- factor(train$is_home_run, levels = c("no", "yes"))

levels(train$is_home_run)  # This should show "no" and "yes"
table(train$is_home_run)  # This should give the count of "yes" and "no"

```
```{r}
train_folds <- vfold_cv(train, v = 5)
```

```{r}
dt_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")
```

```{r}
dt_rec <- recipe(is_home_run ~ ., data = train) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_impute_mode(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors())
```

```{r}
dt_wf <- workflow() |>
  add_model(dt_spec) |>
  add_recipe(dt_rec)
```


```{r}
dt_cv_results <- dt_wf |>
  fit_resamples(train_folds)
```
```{r}
dt_cv_results |>
  collect_metrics()
```

```{r}
dt_fit <- dt_wf |>
  fit(train)
```
```{r}
test$is_home_run <- factor(test$is_home_run, levels = c("no", "yes"))
dt_fit |>
  augment(test) |>
  accuracy(is_home_run, .pred_class)
```

